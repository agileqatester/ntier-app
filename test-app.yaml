apiVersion: v1
kind: ConfigMap
metadata:
  name: ntire-app-test-config
data:
  app.py: |
    from flask import Flask, request
    import socket
    import os
    
    app = Flask(__name__)
    
    @app.route('/')
    def info():
        return {
            'ip': request.remote_addr,
            'port': request.environ.get('REMOTE_PORT'),
            'host': socket.gethostname(),
            'instance_id': os.getenv('HOSTNAME')
        }
    
    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ntire-app-test
  labels:
    app: ntire-app-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ntire-app-test
  template:
    metadata:
      labels:
        app: ntire-app-test
    spec:
      containers:
      - name: web
        image: python:3.11-slim
        command: ["/bin/sh","-c","pip install flask && python /app/app.py"]
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: appcode
          mountPath: /app
      volumes:
      - name: appcode
        configMap:
          name: ntire-app-test-config

---
apiVersion: v1
kind: Service
metadata:
  name: ntire-app-test-svc
spec:
  type: LoadBalancer
  selector:
    app: ntire-app-test
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080